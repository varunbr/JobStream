// <auto-generated />
using System;
using JobStream.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobStream.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230627103532_ModelSchema")]
    partial class ModelSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobStream.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobBlockId")
                        .HasColumnType("integer");

                    b.Property<int>("JobProcessId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobBlockId");

                    b.HasIndex("JobProcessId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobStream.Entities.JobBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConditionBlockId")
                        .HasColumnType("integer");

                    b.Property<int?>("ElseBlockId")
                        .HasColumnType("integer");

                    b.Property<string>("ExecutionResultType")
                        .HasColumnType("text");

                    b.Property<string>("ExecutionType")
                        .HasColumnType("text");

                    b.Property<int?>("IfBlockId")
                        .HasColumnType("integer");

                    b.Property<string>("JobBlockType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConditionBlockId")
                        .IsUnique();

                    b.HasIndex("ElseBlockId")
                        .IsUnique();

                    b.HasIndex("IfBlockId")
                        .IsUnique();

                    b.ToTable("JobBlocks");
                });

            modelBuilder.Entity("JobStream.Entities.JobProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobBlockId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobBlockId")
                        .IsUnique();

                    b.ToTable("JobProcesses");
                });

            modelBuilder.Entity("JobStream.Entities.JobProcessHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobProcessId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobProcessId");

                    b.ToTable("JobStreamHistories");
                });

            modelBuilder.Entity("JobStream.Entities.JobResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<int>("JobProcessId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("ResultStatus")
                        .HasColumnType("text");

                    b.Property<int>("RunId")
                        .HasColumnType("integer");

                    b.Property<string>("RunStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobProcessId");

                    b.HasIndex("RunId");

                    b.ToTable("JobResults");
                });

            modelBuilder.Entity("JobStream.Entities.Job", b =>
                {
                    b.HasOne("JobStream.Entities.JobBlock", "JobBlock")
                        .WithMany("Jobs")
                        .HasForeignKey("JobBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobStream.Entities.JobProcess", "JobProcess")
                        .WithMany("Jobs")
                        .HasForeignKey("JobProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBlock");

                    b.Navigation("JobProcess");
                });

            modelBuilder.Entity("JobStream.Entities.JobBlock", b =>
                {
                    b.HasOne("JobStream.Entities.JobBlock", "ConditionBlock")
                        .WithOne("ParentConditionBlock")
                        .HasForeignKey("JobStream.Entities.JobBlock", "ConditionBlockId");

                    b.HasOne("JobStream.Entities.JobBlock", "ElseBlock")
                        .WithOne("ParentElseBlock")
                        .HasForeignKey("JobStream.Entities.JobBlock", "ElseBlockId");

                    b.HasOne("JobStream.Entities.JobBlock", "IfBlock")
                        .WithOne("ParentIfBlock")
                        .HasForeignKey("JobStream.Entities.JobBlock", "IfBlockId");

                    b.Navigation("ConditionBlock");

                    b.Navigation("ElseBlock");

                    b.Navigation("IfBlock");
                });

            modelBuilder.Entity("JobStream.Entities.JobProcess", b =>
                {
                    b.HasOne("JobStream.Entities.JobBlock", "JobBlock")
                        .WithOne("JobProcess")
                        .HasForeignKey("JobStream.Entities.JobProcess", "JobBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobBlock");
                });

            modelBuilder.Entity("JobStream.Entities.JobProcessHistory", b =>
                {
                    b.HasOne("JobStream.Entities.JobProcess", "JobProcess")
                        .WithMany("Histories")
                        .HasForeignKey("JobProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobProcess");
                });

            modelBuilder.Entity("JobStream.Entities.JobResult", b =>
                {
                    b.HasOne("JobStream.Entities.Job", "Job")
                        .WithMany("JobResults")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobStream.Entities.JobProcess", "JobProcess")
                        .WithMany("JobResults")
                        .HasForeignKey("JobProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobStream.Entities.JobProcessHistory", "JobProcessHistory")
                        .WithMany("JobResults")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobProcess");

                    b.Navigation("JobProcessHistory");
                });

            modelBuilder.Entity("JobStream.Entities.Job", b =>
                {
                    b.Navigation("JobResults");
                });

            modelBuilder.Entity("JobStream.Entities.JobBlock", b =>
                {
                    b.Navigation("JobProcess")
                        .IsRequired();

                    b.Navigation("Jobs");

                    b.Navigation("ParentConditionBlock")
                        .IsRequired();

                    b.Navigation("ParentElseBlock")
                        .IsRequired();

                    b.Navigation("ParentIfBlock")
                        .IsRequired();
                });

            modelBuilder.Entity("JobStream.Entities.JobProcess", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("JobResults");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobStream.Entities.JobProcessHistory", b =>
                {
                    b.Navigation("JobResults");
                });
#pragma warning restore 612, 618
        }
    }
}
